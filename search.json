[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "geneorder",
    "section": "",
    "text": "This package was born out of my continuous efforts to write streamlined code to plot Hox gene clusters. It seems like this is a task I will be performing many times, and there don’t seem to be too many tools out there, so I wrote my own. This is my matplotlib-based answer, and I hope that it is useful to you, too.",
    "crumbs": [
      "geneorder"
    ]
  },
  {
    "objectID": "index.html#input",
    "href": "index.html#input",
    "title": "geneorder",
    "section": "Input",
    "text": "Input\nGenerally, the package expects you to have, at least, knowledge of the gene IDs that you want to visualize, and knowledge of their coordinates in the genome. This can be manually encoded or come in table form - crucially, it can be read from a GFF3 file.",
    "crumbs": [
      "geneorder"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "geneorder",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/galicae/geneorder.git\nor from pypi\n$ pip install geneorder\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on pypi.",
    "crumbs": [
      "geneorder"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "geneorder",
    "section": "How to use",
    "text": "How to use\nThe most basic geneorder use case is when you have a list of genes that are co-linear and would like to plot them in their chromosomal context. The least information that is needed for that is\n\nthe chromosome name\nthe gene IDs/names\nthe starts/ends of all genes\nthe strand and orientation of the genes\n\n\nimport pandas as pd\n\nfrom geneorder.core import plot_synteny_schematic\n\n\ngene_dict = {\n    \"gene_name\": [\n        \"Hox1\",\n        \"Hox2\",\n        \"Hox3\",\n        \"Hox4\",\n        \"Hox5\",\n        \"Hox6\",\n        \"Hox7\",\n        \"Hox8\",\n        \"Hox10\",\n    ],\n    \"gene_id\": [\n        \"PB.8615\",\n        \"g9718\",\n        \"PB.8616\",\n        \"g9720\",\n        \"g9721\",\n        \"PB.8617\",\n        \"g9723\",\n        \"g9724\",\n        \"g9725\",\n    ],\n    \"start\": [\n        1927066,\n        1998922,\n        2058396,\n        2195412,\n        2351936,\n        2373415,\n        2565196,\n        2916314,\n        2986021,\n    ],\n    \"end\": [\n        1936157,\n        2024148,\n        2065953,\n        2206712,\n        2354374,\n        2375678,\n        2594468,\n        2926445,\n        2996225,\n    ],\n}\n\nminimal = pd.DataFrame(gene_dict)\nminimal[\"seqid\"] = \"pseudochrom_56\"\nminimal[\"strand\"] = \"-\"\n\n\nminimal\n\n\n\n\n\n\n\n\ngene_name\ngene_id\nstart\nend\nseqid\nstrand\n\n\n\n\n0\nHox1\nPB.8615\n1927066\n1936157\npseudochrom_56\n-\n\n\n1\nHox2\ng9718\n1998922\n2024148\npseudochrom_56\n-\n\n\n2\nHox3\nPB.8616\n2058396\n2065953\npseudochrom_56\n-\n\n\n3\nHox4\ng9720\n2195412\n2206712\npseudochrom_56\n-\n\n\n4\nHox5\ng9721\n2351936\n2354374\npseudochrom_56\n-\n\n\n5\nHox6\nPB.8617\n2373415\n2375678\npseudochrom_56\n-\n\n\n6\nHox7\ng9723\n2565196\n2594468\npseudochrom_56\n-\n\n\n7\nHox8\ng9724\n2916314\n2926445\npseudochrom_56\n-\n\n\n8\nHox10\ng9725\n2986021\n2996225\npseudochrom_56\n-\n\n\n\n\n\n\n\n\nplot_synteny_schematic(minimal)\n\n\n\n\n\n\n\n\nThe plot can be customized, e.g. by including color:\n\nminimal[\"color\"] = [\n    \"red\",\n    \"orange\",\n    \"gold\",\n    \"lightgreen\",\n    \"forestgreen\",\n    \"royalblue\",\n    \"darkblue\",\n    \"darkmagenta\",\n    \"magenta\",\n]\n\nplot_synteny_schematic(minimal)\n\n\n\n\n\n\n\n\nWe can also edit the dataframe to indicate missing genes:\n\nfrom geneorder import util\n\n\nminimal = util.insert_gap(\n    minimal,\n    \"Hox8\",\n    \"Hox10\",\n    \"gene_name\",\n    no_gaps=1,\n    purge_columns=[\"gene_id\", \"color\"],\n)\n\n\nplot_synteny_schematic(minimal)\n\n\n\n\n\n\n\n\nFor more details, please refer to the documentation.",
    "crumbs": [
      "geneorder"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "Before we get started with plotting, we should read in some toy data. This is a modified excerpt from the P. litorale genome annotation, specifically the part that holds the Hox gene cluster.\n\ngff = util.read_gff(os.environ[\"EXAMPLE_DATA_PATH\"] + \"plit.gff3\")\nutil.decorate(gff, attributes={\"gene_id\": \"ID\", \"gene_name\": \"gene\"})\n\nhox_genes = [\n    \"PB.8615\",\n    \"g9718\",\n    \"PB.8616\",\n    \"g9720\",\n    \"g9721\",\n    \"PB.8617\",\n    \"g9723\",\n    \"g9724\",\n    \"g9725\",\n]\nkeep = gff[\"gene_id\"].isin(hox_genes)\nhox = gff[keep].reset_index(drop=True)\n\n\nsource\n\nplot_synteny\n\n plot_synteny (gff, block_start:int=None, block_end:int=None,\n               figsize:(&lt;class'float'&gt;,&lt;class'float'&gt;)=None,\n               locus_start:str='start', locus_end:str='end',\n               molecule:str='seqid', locus_name:str='gene_name',\n               fig_title:str=None, save:str|pathlib.Path='synteny.svg',\n               palette:dict|None={'aliceblue': '#F0F8FF', 'antiquewhite':\n               '#FAEBD7', 'aqua': '#00FFFF', 'aquamarine': '#7FFFD4',\n               'azure': '#F0FFFF', 'beige': '#F5F5DC', 'bisque':\n               '#FFE4C4', 'black': '#000000', 'blanchedalmond': '#FFEBCD',\n               'blue': '#0000FF', 'blueviolet': '#8A2BE2', 'brown':\n               '#A52A2A', 'burlywood': '#DEB887', 'cadetblue': '#5F9EA0',\n               'chartreuse': '#7FFF00', 'chocolate': '#D2691E', 'coral':\n               '#FF7F50', 'cornflowerblue': '#6495ED', 'cornsilk':\n               '#FFF8DC', 'crimson': '#DC143C', 'cyan': '#00FFFF',\n               'darkblue': '#00008B', 'darkcyan': '#008B8B',\n               'darkgoldenrod': '#B8860B', 'darkgray': '#A9A9A9',\n               'darkgreen': '#006400', 'darkgrey': '#A9A9A9', 'darkkhaki':\n               '#BDB76B', 'darkmagenta': '#8B008B', 'darkolivegreen':\n               '#556B2F', 'darkorange': '#FF8C00', 'darkorchid':\n               '#9932CC', 'darkred': '#8B0000', 'darksalmon': '#E9967A',\n               'darkseagreen': '#8FBC8F', 'darkslateblue': '#483D8B',\n               'darkslategray': '#2F4F4F', 'darkslategrey': '#2F4F4F',\n               'darkturquoise': '#00CED1', 'darkviolet': '#9400D3',\n               'deeppink': '#FF1493', 'deepskyblue': '#00BFFF', 'dimgray':\n               '#696969', 'dimgrey': '#696969', 'dodgerblue': '#1E90FF',\n               'firebrick': '#B22222', 'floralwhite': '#FFFAF0',\n               'forestgreen': '#228B22', 'fuchsia': '#FF00FF',\n               'gainsboro': '#DCDCDC', 'ghostwhite': '#F8F8FF', 'gold':\n               '#FFD700', 'goldenrod': '#DAA520', 'gray': '#808080',\n               'green': '#008000', 'greenyellow': '#ADFF2F', 'grey':\n               '#808080', 'honeydew': '#F0FFF0', 'hotpink': '#FF69B4',\n               'indianred': '#CD5C5C', 'indigo': '#4B0082', 'ivory':\n               '#FFFFF0', 'khaki': '#F0E68C', 'lavender': '#E6E6FA',\n               'lavenderblush': '#FFF0F5', 'lawngreen': '#7CFC00',\n               'lemonchiffon': '#FFFACD', 'lightblue': '#ADD8E6',\n               'lightcoral': '#F08080', 'lightcyan': '#E0FFFF',\n               'lightgoldenrodyellow': '#FAFAD2', 'lightgray': '#D3D3D3',\n               'lightgreen': '#90EE90', 'lightgrey': '#D3D3D3',\n               'lightpink': '#FFB6C1', 'lightsalmon': '#FFA07A',\n               'lightseagreen': '#20B2AA', 'lightskyblue': '#87CEFA',\n               'lightslategray': '#778899', 'lightslategrey': '#778899',\n               'lightsteelblue': '#B0C4DE', 'lightyellow': '#FFFFE0',\n               'lime': '#00FF00', 'limegreen': '#32CD32', 'linen':\n               '#FAF0E6', 'magenta': '#FF00FF', 'maroon': '#800000',\n               'mediumaquamarine': '#66CDAA', 'mediumblue': '#0000CD',\n               'mediumorchid': '#BA55D3', 'mediumpurple': '#9370DB',\n               'mediumseagreen': '#3CB371', 'mediumslateblue': '#7B68EE',\n               'mediumspringgreen': '#00FA9A', 'mediumturquoise':\n               '#48D1CC', 'mediumvioletred': '#C71585', 'midnightblue':\n               '#191970', 'mintcream': '#F5FFFA', 'mistyrose': '#FFE4E1',\n               'moccasin': '#FFE4B5', 'navajowhite': '#FFDEAD', 'navy':\n               '#000080', 'oldlace': '#FDF5E6', 'olive': '#808000',\n               'olivedrab': '#6B8E23', 'orange': '#FFA500', 'orangered':\n               '#FF4500', 'orchid': '#DA70D6', 'palegoldenrod': '#EEE8AA',\n               'palegreen': '#98FB98', 'paleturquoise': '#AFEEEE',\n               'palevioletred': '#DB7093', 'papayawhip': '#FFEFD5',\n               'peachpuff': '#FFDAB9', 'peru': '#CD853F', 'pink':\n               '#FFC0CB', 'plum': '#DDA0DD', 'powderblue': '#B0E0E6',\n               'purple': '#800080', 'rebeccapurple': '#663399', 'red':\n               '#FF0000', 'rosybrown': '#BC8F8F', 'royalblue': '#4169E1',\n               'saddlebrown': '#8B4513', 'salmon': '#FA8072',\n               'sandybrown': '#F4A460', 'seagreen': '#2E8B57', 'seashell':\n               '#FFF5EE', 'sienna': '#A0522D', 'silver': '#C0C0C0',\n               'skyblue': '#87CEEB', 'slateblue': '#6A5ACD', 'slategray':\n               '#708090', 'slategrey': '#708090', 'snow': '#FFFAFA',\n               'springgreen': '#00FF7F', 'steelblue': '#4682B4', 'tan':\n               '#D2B48C', 'teal': '#008080', 'thistle': '#D8BFD8',\n               'tomato': '#FF6347', 'turquoise': '#40E0D0', 'violet':\n               '#EE82EE', 'wheat': '#F5DEB3', 'white': '#FFFFFF',\n               'whitesmoke': '#F5F5F5', 'yellow': '#FFFF00',\n               'yellowgreen': '#9ACD32'},\n               chromosome_color:str='lightgray',\n               backup_gene_color:str='darkgray',\n               gene_name_offset:float=0.02, chromosome_width:float=1,\n               gene_width:float=5)\n\nFunction to plot a syntenic cluster of genes.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngff\n\n\na GFF in Pandas dataframe form. Only includes the genes of the syntenic block in question.\n\n\nblock_start\nint\nNone\nThe start coordinate of the syntenic locus to plot. If None, will be set to the start of the first gene minus 5% of the block length.\n\n\nblock_end\nint\nNone\nThe end coordinate of the syntenic locus to plot. If None, will be set to the end of the last gene plus 5% of the block length.\n\n\nfigsize\n(&lt;class ‘float’&gt;, &lt;class ‘float’&gt;)\nNone\nthe figure size.\n\n\nlocus_start\nstr\nstart\nthe GFF column that describes the start coordinate of the entities (e.g. gene, mRNA) to be plotted on the chromosome. In a well-behaved GFF, this should be “start”.\n\n\nlocus_end\nstr\nend\nthe GFF column that describes the end coordinate of the entities (e.g. gene, mRNA) to be plotted on the chromosome. In a well-behaved GFF, this should be “end”.\n\n\nmolecule\nstr\nseqid\nthe GFF column that holds the molecule name (chromosome/scaffold/contig ID). In a well-behaved GFF, this should be “seqid”.\n\n\nlocus_name\nstr\ngene_name\nthe GFF column that holds the gene/mRNA symbol. This is usually a tag in the “attributes” column of a well-behaved GFF and should have been extracted prior to this step. It will be plotted according to the gene_name_offset parameter.\n\n\nfig_title\nstr\nNone\nFigure title.\n\n\nsave\nstr | pathlib.Path\nsynteny.svg\npath to save an SVG image.\n\n\npalette\ndict | None\n{‘aliceblue’: ‘#F0F8FF’, ‘antiquewhite’: ‘#FAEBD7’, ‘aqua’: ‘#00FFFF’, ‘aquamarine’: ‘#7FFFD4’, ‘azure’: ‘#F0FFFF’, ‘beige’: ‘#F5F5DC’, ‘bisque’: ‘#FFE4C4’, ‘black’: ‘#000000’, ‘blanchedalmond’: ‘#FFEBCD’, ‘blue’: ‘#0000FF’, ‘blueviolet’: ‘#8A2BE2’, ‘brown’: ‘#A52A2A’, ‘burlywood’: ‘#DEB887’, ‘cadetblue’: ‘#5F9EA0’, ‘chartreuse’: ‘#7FFF00’, ‘chocolate’: ‘#D2691E’, ‘coral’: ‘#FF7F50’, ‘cornflowerblue’: ‘#6495ED’, ‘cornsilk’: ‘#FFF8DC’, ‘crimson’: ‘#DC143C’, ‘cyan’: ‘#00FFFF’, ‘darkblue’: ‘#00008B’, ‘darkcyan’: ‘#008B8B’, ‘darkgoldenrod’: ‘#B8860B’, ‘darkgray’: ‘#A9A9A9’, ‘darkgreen’: ‘#006400’, ‘darkgrey’: ‘#A9A9A9’, ‘darkkhaki’: ‘#BDB76B’, ‘darkmagenta’: ‘#8B008B’, ‘darkolivegreen’: ‘#556B2F’, ‘darkorange’: ‘#FF8C00’, ‘darkorchid’: ‘#9932CC’, ‘darkred’: ‘#8B0000’, ‘darksalmon’: ‘#E9967A’, ‘darkseagreen’: ‘#8FBC8F’, ‘darkslateblue’: ‘#483D8B’, ‘darkslategray’: ‘#2F4F4F’, ‘darkslategrey’: ‘#2F4F4F’, ‘darkturquoise’: ‘#00CED1’, ‘darkviolet’: ‘#9400D3’, ‘deeppink’: ‘#FF1493’, ‘deepskyblue’: ‘#00BFFF’, ‘dimgray’: ‘#696969’, ‘dimgrey’: ‘#696969’, ‘dodgerblue’: ‘#1E90FF’, ‘firebrick’: ‘#B22222’, ‘floralwhite’: ‘#FFFAF0’, ‘forestgreen’: ‘#228B22’, ‘fuchsia’: ‘#FF00FF’, ‘gainsboro’: ‘#DCDCDC’, ‘ghostwhite’: ‘#F8F8FF’, ‘gold’: ‘#FFD700’, ‘goldenrod’: ‘#DAA520’, ‘gray’: ‘#808080’, ‘green’: ‘#008000’, ‘greenyellow’: ‘#ADFF2F’, ‘grey’: ‘#808080’, ‘honeydew’: ‘#F0FFF0’, ‘hotpink’: ‘#FF69B4’, ‘indianred’: ‘#CD5C5C’, ‘indigo’: ‘#4B0082’, ‘ivory’: ‘#FFFFF0’, ‘khaki’: ‘#F0E68C’, ‘lavender’: ‘#E6E6FA’, ‘lavenderblush’: ‘#FFF0F5’, ‘lawngreen’: ‘#7CFC00’, ‘lemonchiffon’: ‘#FFFACD’, ‘lightblue’: ‘#ADD8E6’, ‘lightcoral’: ‘#F08080’, ‘lightcyan’: ‘#E0FFFF’, ‘lightgoldenrodyellow’: ‘#FAFAD2’, ‘lightgray’: ‘#D3D3D3’, ‘lightgreen’: ‘#90EE90’, ‘lightgrey’: ‘#D3D3D3’, ‘lightpink’: ‘#FFB6C1’, ‘lightsalmon’: ‘#FFA07A’, ‘lightseagreen’: ‘#20B2AA’, ‘lightskyblue’: ‘#87CEFA’, ‘lightslategray’: ‘#778899’, ‘lightslategrey’: ‘#778899’, ‘lightsteelblue’: ‘#B0C4DE’, ‘lightyellow’: ‘#FFFFE0’, ‘lime’: ‘#00FF00’, ‘limegreen’: ‘#32CD32’, ‘linen’: ‘#FAF0E6’, ‘magenta’: ‘#FF00FF’, ‘maroon’: ‘#800000’, ‘mediumaquamarine’: ‘#66CDAA’, ‘mediumblue’: ‘#0000CD’, ‘mediumorchid’: ‘#BA55D3’, ‘mediumpurple’: ‘#9370DB’, ‘mediumseagreen’: ‘#3CB371’, ‘mediumslateblue’: ‘#7B68EE’, ‘mediumspringgreen’: ‘#00FA9A’, ‘mediumturquoise’: ‘#48D1CC’, ‘mediumvioletred’: ‘#C71585’, ‘midnightblue’: ‘#191970’, ‘mintcream’: ‘#F5FFFA’, ‘mistyrose’: ‘#FFE4E1’, ‘moccasin’: ‘#FFE4B5’, ‘navajowhite’: ‘#FFDEAD’, ‘navy’: ‘#000080’, ‘oldlace’: ‘#FDF5E6’, ‘olive’: ‘#808000’, ‘olivedrab’: ‘#6B8E23’, ‘orange’: ‘#FFA500’, ‘orangered’: ‘#FF4500’, ‘orchid’: ‘#DA70D6’, ‘palegoldenrod’: ‘#EEE8AA’, ‘palegreen’: ‘#98FB98’, ‘paleturquoise’: ‘#AFEEEE’, ‘palevioletred’: ‘#DB7093’, ‘papayawhip’: ‘#FFEFD5’, ‘peachpuff’: ‘#FFDAB9’, ‘peru’: ‘#CD853F’, ‘pink’: ‘#FFC0CB’, ‘plum’: ‘#DDA0DD’, ‘powderblue’: ‘#B0E0E6’, ‘purple’: ‘#800080’, ‘rebeccapurple’: ‘#663399’, ‘red’: ‘#FF0000’, ‘rosybrown’: ‘#BC8F8F’, ‘royalblue’: ‘#4169E1’, ‘saddlebrown’: ‘#8B4513’, ‘salmon’: ‘#FA8072’, ‘sandybrown’: ‘#F4A460’, ‘seagreen’: ‘#2E8B57’, ‘seashell’: ‘#FFF5EE’, ‘sienna’: ‘#A0522D’, ‘silver’: ‘#C0C0C0’, ‘skyblue’: ‘#87CEEB’, ‘slateblue’: ‘#6A5ACD’, ‘slategray’: ‘#708090’, ‘slategrey’: ‘#708090’, ‘snow’: ‘#FFFAFA’, ‘springgreen’: ‘#00FF7F’, ‘steelblue’: ‘#4682B4’, ‘tan’: ‘#D2B48C’, ‘teal’: ‘#008080’, ‘thistle’: ‘#D8BFD8’, ‘tomato’: ‘#FF6347’, ‘turquoise’: ‘#40E0D0’, ‘violet’: ‘#EE82EE’, ‘wheat’: ‘#F5DEB3’, ‘white’: ‘#FFFFFF’, ‘whitesmoke’: ‘#F5F5F5’, ‘yellow’: ‘#FFFF00’, ‘yellowgreen’: ‘#9ACD32’}\n\n\n\nchromosome_color\nstr\nlightgray\nthe color of the line representing the molecule the genes are plotted on.\n\n\nbackup_gene_color\nstr\ndarkgray\nIf the GFF has no column titled “color”, the gene arrows will be filled using this color.\n\n\ngene_name_offset\nfloat\n0.02\nDefault offset for plotting gene names if the GFF has no column titled “offset”.\n\n\nchromosome_width\nfloat\n1\nLinewidth parameter for the line representing the chromosome.\n\n\ngene_width\nfloat\n5\nWidth of the arrow patches representing genes. Please refer to the documentation of matplotlib.pyplot.arrow for more details.\n\n\nReturns\nNone\n\n\n\n\n\nWe can use this function with any GFF dataframe that is reduced to one row per gene (for example a type: gene or type: mRNA entry per gene).\n\nplot_synteny(hox, figsize=(11, 2))\n\n\n\n\n\n\n\n\nIf the input GFF contains information about the color and the gene name offsets, the plotter will use them:\n\nhox[\"color\"] = [\n    \"red\",\n    \"orange\",\n    \"gold\",\n    \"lightgreen\",\n    \"forestgreen\",\n    \"royalblue\",\n    \"darkblue\",\n    \"darkmagenta\",\n    \"magenta\",\n]\nhox[\"offset\"] = [0.02, -0.025, 0.02, 0.02, 0.02, -0.025, 0.02, 0.02, 0.02]\n\n\nplot_synteny(hox, figsize=(11, 2))\nhox[\"strand\"] = [\"+\", \"-\", \"+\", \"-\", \"-\", \"-\", \"+\", \"+\", \"+\"]\nplot_synteny(hox, figsize=(11, 2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also use hex codes directly for coloring:\n\nhox[\"color\"] = [\n    \"#E7DAD2\",\n    \"#CFE2B7\",\n    \"#FA7F6F\",\n    \"#83B0D2\",\n    \"#BEB9DC\",\n    \"#C0E59A\",\n    \"#8ECFC9\",\n    \"#FFBE79\",\n    \"#BAAC8C\",\n]\n\n\nplot_synteny(hox, figsize=(11, 2), palette=None)\n\n\n\n\n\n\n\n\n\nsource\n\n\nplot_synteny_schematic\n\n plot_synteny_schematic (gff:pandas.core.frame.DataFrame,\n                         block_gene:float=400, block_dist:float=200,\n                         locus_start:str='start', locus_end:str='end',\n                         molecule:str='seqid', locus_name:str='gene_name',\n                         interrupted:bool=False,\n                         palette:dict|None={'aliceblue': '#F0F8FF',\n                         'antiquewhite': '#FAEBD7', 'aqua': '#00FFFF',\n                         'aquamarine': '#7FFFD4', 'azure': '#F0FFFF',\n                         'beige': '#F5F5DC', 'bisque': '#FFE4C4', 'black':\n                         '#000000', 'blanchedalmond': '#FFEBCD', 'blue':\n                         '#0000FF', 'blueviolet': '#8A2BE2', 'brown':\n                         '#A52A2A', 'burlywood': '#DEB887', 'cadetblue':\n                         '#5F9EA0', 'chartreuse': '#7FFF00', 'chocolate':\n                         '#D2691E', 'coral': '#FF7F50', 'cornflowerblue':\n                         '#6495ED', 'cornsilk': '#FFF8DC', 'crimson':\n                         '#DC143C', 'cyan': '#00FFFF', 'darkblue':\n                         '#00008B', 'darkcyan': '#008B8B',\n                         'darkgoldenrod': '#B8860B', 'darkgray':\n                         '#A9A9A9', 'darkgreen': '#006400', 'darkgrey':\n                         '#A9A9A9', 'darkkhaki': '#BDB76B', 'darkmagenta':\n                         '#8B008B', 'darkolivegreen': '#556B2F',\n                         'darkorange': '#FF8C00', 'darkorchid': '#9932CC',\n                         'darkred': '#8B0000', 'darksalmon': '#E9967A',\n                         'darkseagreen': '#8FBC8F', 'darkslateblue':\n                         '#483D8B', 'darkslategray': '#2F4F4F',\n                         'darkslategrey': '#2F4F4F', 'darkturquoise':\n                         '#00CED1', 'darkviolet': '#9400D3', 'deeppink':\n                         '#FF1493', 'deepskyblue': '#00BFFF', 'dimgray':\n                         '#696969', 'dimgrey': '#696969', 'dodgerblue':\n                         '#1E90FF', 'firebrick': '#B22222', 'floralwhite':\n                         '#FFFAF0', 'forestgreen': '#228B22', 'fuchsia':\n                         '#FF00FF', 'gainsboro': '#DCDCDC', 'ghostwhite':\n                         '#F8F8FF', 'gold': '#FFD700', 'goldenrod':\n                         '#DAA520', 'gray': '#808080', 'green': '#008000',\n                         'greenyellow': '#ADFF2F', 'grey': '#808080',\n                         'honeydew': '#F0FFF0', 'hotpink': '#FF69B4',\n                         'indianred': '#CD5C5C', 'indigo': '#4B0082',\n                         'ivory': '#FFFFF0', 'khaki': '#F0E68C',\n                         'lavender': '#E6E6FA', 'lavenderblush':\n                         '#FFF0F5', 'lawngreen': '#7CFC00',\n                         'lemonchiffon': '#FFFACD', 'lightblue':\n                         '#ADD8E6', 'lightcoral': '#F08080', 'lightcyan':\n                         '#E0FFFF', 'lightgoldenrodyellow': '#FAFAD2',\n                         'lightgray': '#D3D3D3', 'lightgreen': '#90EE90',\n                         'lightgrey': '#D3D3D3', 'lightpink': '#FFB6C1',\n                         'lightsalmon': '#FFA07A', 'lightseagreen':\n                         '#20B2AA', 'lightskyblue': '#87CEFA',\n                         'lightslategray': '#778899', 'lightslategrey':\n                         '#778899', 'lightsteelblue': '#B0C4DE',\n                         'lightyellow': '#FFFFE0', 'lime': '#00FF00',\n                         'limegreen': '#32CD32', 'linen': '#FAF0E6',\n                         'magenta': '#FF00FF', 'maroon': '#800000',\n                         'mediumaquamarine': '#66CDAA', 'mediumblue':\n                         '#0000CD', 'mediumorchid': '#BA55D3',\n                         'mediumpurple': '#9370DB', 'mediumseagreen':\n                         '#3CB371', 'mediumslateblue': '#7B68EE',\n                         'mediumspringgreen': '#00FA9A',\n                         'mediumturquoise': '#48D1CC', 'mediumvioletred':\n                         '#C71585', 'midnightblue': '#191970',\n                         'mintcream': '#F5FFFA', 'mistyrose': '#FFE4E1',\n                         'moccasin': '#FFE4B5', 'navajowhite': '#FFDEAD',\n                         'navy': '#000080', 'oldlace': '#FDF5E6', 'olive':\n                         '#808000', 'olivedrab': '#6B8E23', 'orange':\n                         '#FFA500', 'orangered': '#FF4500', 'orchid':\n                         '#DA70D6', 'palegoldenrod': '#EEE8AA',\n                         'palegreen': '#98FB98', 'paleturquoise':\n                         '#AFEEEE', 'palevioletred': '#DB7093',\n                         'papayawhip': '#FFEFD5', 'peachpuff': '#FFDAB9',\n                         'peru': '#CD853F', 'pink': '#FFC0CB', 'plum':\n                         '#DDA0DD', 'powderblue': '#B0E0E6', 'purple':\n                         '#800080', 'rebeccapurple': '#663399', 'red':\n                         '#FF0000', 'rosybrown': '#BC8F8F', 'royalblue':\n                         '#4169E1', 'saddlebrown': '#8B4513', 'salmon':\n                         '#FA8072', 'sandybrown': '#F4A460', 'seagreen':\n                         '#2E8B57', 'seashell': '#FFF5EE', 'sienna':\n                         '#A0522D', 'silver': '#C0C0C0', 'skyblue':\n                         '#87CEEB', 'slateblue': '#6A5ACD', 'slategray':\n                         '#708090', 'slategrey': '#708090', 'snow':\n                         '#FFFAFA', 'springgreen': '#00FF7F', 'steelblue':\n                         '#4682B4', 'tan': '#D2B48C', 'teal': '#008080',\n                         'thistle': '#D8BFD8', 'tomato': '#FF6347',\n                         'turquoise': '#40E0D0', 'violet': '#EE82EE',\n                         'wheat': '#F5DEB3', 'white': '#FFFFFF',\n                         'whitesmoke': '#F5F5F5', 'yellow': '#FFFF00',\n                         'yellowgreen': '#9ACD32'}, fontsize:int=30,\n                         chromosome_color:str='black',\n                         backup_gene_color:str='darkgray',\n                         gene_name_offset:float=0.02,\n                         chromosome_width:float=3, head_length:float=200,\n                         head_width:float=1.7, gene_width:float=1,\n                         ax:matplotlib.axes._axes.Axes=None,\n                         figsize:(&lt;class'float'&gt;,&lt;class'float'&gt;)=None,\n                         save:str|pathlib.Path='schematic.svg',\n                         return_fig:bool=False)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngff\nDataFrame\n\na GFF in Pandas dataframe form. Only includes the genes of the syntenic block in question. Assumed to be sorted in plotting order.\n\n\nblock_gene\nfloat\n400\nlength of a gene arrow, in plot coordinate space.\n\n\nblock_dist\nfloat\n200\nlength of gap between successive genes, in plot coordinate space.\n\n\nlocus_start\nstr\nstart\nthe GFF column that describes the start coordinate of the entities (e.g. gene, mRNA) to be plotted on the chromosome. In a well-behaved GFF, this should be “start”.\n\n\nlocus_end\nstr\nend\nthe GFF column that describes the end coordinate of the entities (e.g. gene, mRNA) to be plotted on the chromosome. In a well-behaved GFF, this should be “end”.\n\n\nmolecule\nstr\nseqid\nthe GFF column that holds the molecule name (chromosome/scaffold/contig ID). In a well-behaved GFF, this should be “seqid”.\n\n\nlocus_name\nstr\ngene_name\nthe GFF column that holds the gene/mRNA symbol. This is usually a tag in the “attributes” column of a well-behaved GFF and should have been extracted prior to this step. It will be plotted according to the gene_name_offset parameter.\n\n\ninterrupted\nbool\nFalse\nis the syntenic cluster on multiple pseudomolecules?\n\n\npalette\ndict | None\n{‘aliceblue’: ‘#F0F8FF’, ‘antiquewhite’: ‘#FAEBD7’, ‘aqua’: ‘#00FFFF’, ‘aquamarine’: ‘#7FFFD4’, ‘azure’: ‘#F0FFFF’, ‘beige’: ‘#F5F5DC’, ‘bisque’: ‘#FFE4C4’, ‘black’: ‘#000000’, ‘blanchedalmond’: ‘#FFEBCD’, ‘blue’: ‘#0000FF’, ‘blueviolet’: ‘#8A2BE2’, ‘brown’: ‘#A52A2A’, ‘burlywood’: ‘#DEB887’, ‘cadetblue’: ‘#5F9EA0’, ‘chartreuse’: ‘#7FFF00’, ‘chocolate’: ‘#D2691E’, ‘coral’: ‘#FF7F50’, ‘cornflowerblue’: ‘#6495ED’, ‘cornsilk’: ‘#FFF8DC’, ‘crimson’: ‘#DC143C’, ‘cyan’: ‘#00FFFF’, ‘darkblue’: ‘#00008B’, ‘darkcyan’: ‘#008B8B’, ‘darkgoldenrod’: ‘#B8860B’, ‘darkgray’: ‘#A9A9A9’, ‘darkgreen’: ‘#006400’, ‘darkgrey’: ‘#A9A9A9’, ‘darkkhaki’: ‘#BDB76B’, ‘darkmagenta’: ‘#8B008B’, ‘darkolivegreen’: ‘#556B2F’, ‘darkorange’: ‘#FF8C00’, ‘darkorchid’: ‘#9932CC’, ‘darkred’: ‘#8B0000’, ‘darksalmon’: ‘#E9967A’, ‘darkseagreen’: ‘#8FBC8F’, ‘darkslateblue’: ‘#483D8B’, ‘darkslategray’: ‘#2F4F4F’, ‘darkslategrey’: ‘#2F4F4F’, ‘darkturquoise’: ‘#00CED1’, ‘darkviolet’: ‘#9400D3’, ‘deeppink’: ‘#FF1493’, ‘deepskyblue’: ‘#00BFFF’, ‘dimgray’: ‘#696969’, ‘dimgrey’: ‘#696969’, ‘dodgerblue’: ‘#1E90FF’, ‘firebrick’: ‘#B22222’, ‘floralwhite’: ‘#FFFAF0’, ‘forestgreen’: ‘#228B22’, ‘fuchsia’: ‘#FF00FF’, ‘gainsboro’: ‘#DCDCDC’, ‘ghostwhite’: ‘#F8F8FF’, ‘gold’: ‘#FFD700’, ‘goldenrod’: ‘#DAA520’, ‘gray’: ‘#808080’, ‘green’: ‘#008000’, ‘greenyellow’: ‘#ADFF2F’, ‘grey’: ‘#808080’, ‘honeydew’: ‘#F0FFF0’, ‘hotpink’: ‘#FF69B4’, ‘indianred’: ‘#CD5C5C’, ‘indigo’: ‘#4B0082’, ‘ivory’: ‘#FFFFF0’, ‘khaki’: ‘#F0E68C’, ‘lavender’: ‘#E6E6FA’, ‘lavenderblush’: ‘#FFF0F5’, ‘lawngreen’: ‘#7CFC00’, ‘lemonchiffon’: ‘#FFFACD’, ‘lightblue’: ‘#ADD8E6’, ‘lightcoral’: ‘#F08080’, ‘lightcyan’: ‘#E0FFFF’, ‘lightgoldenrodyellow’: ‘#FAFAD2’, ‘lightgray’: ‘#D3D3D3’, ‘lightgreen’: ‘#90EE90’, ‘lightgrey’: ‘#D3D3D3’, ‘lightpink’: ‘#FFB6C1’, ‘lightsalmon’: ‘#FFA07A’, ‘lightseagreen’: ‘#20B2AA’, ‘lightskyblue’: ‘#87CEFA’, ‘lightslategray’: ‘#778899’, ‘lightslategrey’: ‘#778899’, ‘lightsteelblue’: ‘#B0C4DE’, ‘lightyellow’: ‘#FFFFE0’, ‘lime’: ‘#00FF00’, ‘limegreen’: ‘#32CD32’, ‘linen’: ‘#FAF0E6’, ‘magenta’: ‘#FF00FF’, ‘maroon’: ‘#800000’, ‘mediumaquamarine’: ‘#66CDAA’, ‘mediumblue’: ‘#0000CD’, ‘mediumorchid’: ‘#BA55D3’, ‘mediumpurple’: ‘#9370DB’, ‘mediumseagreen’: ‘#3CB371’, ‘mediumslateblue’: ‘#7B68EE’, ‘mediumspringgreen’: ‘#00FA9A’, ‘mediumturquoise’: ‘#48D1CC’, ‘mediumvioletred’: ‘#C71585’, ‘midnightblue’: ‘#191970’, ‘mintcream’: ‘#F5FFFA’, ‘mistyrose’: ‘#FFE4E1’, ‘moccasin’: ‘#FFE4B5’, ‘navajowhite’: ‘#FFDEAD’, ‘navy’: ‘#000080’, ‘oldlace’: ‘#FDF5E6’, ‘olive’: ‘#808000’, ‘olivedrab’: ‘#6B8E23’, ‘orange’: ‘#FFA500’, ‘orangered’: ‘#FF4500’, ‘orchid’: ‘#DA70D6’, ‘palegoldenrod’: ‘#EEE8AA’, ‘palegreen’: ‘#98FB98’, ‘paleturquoise’: ‘#AFEEEE’, ‘palevioletred’: ‘#DB7093’, ‘papayawhip’: ‘#FFEFD5’, ‘peachpuff’: ‘#FFDAB9’, ‘peru’: ‘#CD853F’, ‘pink’: ‘#FFC0CB’, ‘plum’: ‘#DDA0DD’, ‘powderblue’: ‘#B0E0E6’, ‘purple’: ‘#800080’, ‘rebeccapurple’: ‘#663399’, ‘red’: ‘#FF0000’, ‘rosybrown’: ‘#BC8F8F’, ‘royalblue’: ‘#4169E1’, ‘saddlebrown’: ‘#8B4513’, ‘salmon’: ‘#FA8072’, ‘sandybrown’: ‘#F4A460’, ‘seagreen’: ‘#2E8B57’, ‘seashell’: ‘#FFF5EE’, ‘sienna’: ‘#A0522D’, ‘silver’: ‘#C0C0C0’, ‘skyblue’: ‘#87CEEB’, ‘slateblue’: ‘#6A5ACD’, ‘slategray’: ‘#708090’, ‘slategrey’: ‘#708090’, ‘snow’: ‘#FFFAFA’, ‘springgreen’: ‘#00FF7F’, ‘steelblue’: ‘#4682B4’, ‘tan’: ‘#D2B48C’, ‘teal’: ‘#008080’, ‘thistle’: ‘#D8BFD8’, ‘tomato’: ‘#FF6347’, ‘turquoise’: ‘#40E0D0’, ‘violet’: ‘#EE82EE’, ‘wheat’: ‘#F5DEB3’, ‘white’: ‘#FFFFFF’, ‘whitesmoke’: ‘#F5F5F5’, ‘yellow’: ‘#FFFF00’, ‘yellowgreen’: ‘#9ACD32’}\n\n\n\nfontsize\nint\n30\nthis fontsize works well for default sizes, but is probably too big for smaller plots\n\n\nchromosome_color\nstr\nblack\nthe color of the line representing the molecule the genes are plotted on.\n\n\nbackup_gene_color\nstr\ndarkgray\nIf the GFF has no column titled “color”, the gene arrows will be filled using this color.\n\n\ngene_name_offset\nfloat\n0.02\nDefault offset for plotting gene names if the GFF has no column titled “offset”.\n\n\nchromosome_width\nfloat\n3\nLinewidth parameter for the line representing the chromosome; also, patch linewidth of the arrows representing genes. Please refer to the documentation of matplotlib.patches.FancyArrowPath for more details.\n\n\nhead_length\nfloat\n200\nHead length for the arrows representing genes. Please refer to the documentation of matplotlib.patches.FancyArrowPath for more details.\n\n\nhead_width\nfloat\n1.7\nHead width for the arrows representing genes. Please refer to the documentation of matplotlib.patches.FancyArrowPath for more details.\n\n\ngene_width\nfloat\n1\nWidth of the arrow patches representing genes. Please refer to the documentation of matplotlib.patches.FancyArrowPath for more details.\n\n\nax\nAxes\nNone\na pre-existing matplotlib axes object, if you wish to include this plot in a composite.\n\n\nfigsize\n(&lt;class ‘float’&gt;, &lt;class ‘float’&gt;)\nNone\n\n\n\nsave\nstr | pathlib.Path\nschematic.svg\npath to save an SVG image.\n\n\nreturn_fig\nbool\nFalse\nwhether to return an axes object. Useful for further manipulation of the plot.\n\n\nReturns\nmatplotlib.figure.Figure | matplotlib.axes._axes.Axes | None\n\n\n\n\n\n\nhox[\"color\"] = [\n    \"red\",\n    \"orange\",\n    \"gold\",\n    \"lightgreen\",\n    \"forestgreen\",\n    \"royalblue\",\n    \"darkblue\",\n    \"darkmagenta\",\n    \"magenta\",\n]\nhox[\"offset\"] = 0.02\nhox[\"strand\"] = \"-\"\n\nSometimes (many times) we are not interested in plotting syntenic genes with their real distances; rather, we are interested in the order and orientation of the genes. This representation can be achieved with the plot_synteny_schematic function, that can process the same sort of input as plot_synteny.\n\nplot_synteny_schematic(hox)\n\n\n\n\n\n\n\n\nThe strand is reflected on the orientation of the arrows - genes on the plus strand point right.\n\nhox[\"strand\"] = \"+\"\nplot_synteny_schematic(hox)\n\n\n\n\n\n\n\n\nThe geneorder package uses matplotlib.patches.FancyArrow for the schematic plots, and hence the shape of the arrowhead can be precisely controlled:\n\nplot_synteny_schematic(hox, head_length=100, head_width=3)\nplot_synteny_schematic(hox, head_length=300, head_width=1.0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn interesting edge case is setting the head width and length both to 0, in order to plot rectangles. This may be useful if the orientation of the features is not important:\n\nplot_synteny_schematic(hox, head_length=0, head_width=0)\n\n\n\n\n\n\n\n\nSometimes we will not have information about the orientation of single genes, for instance when there is no gene model predicted. In those cases, the strand can be set to ., something the GFF standard often uses to denote missing values. The width of the block will still be equivalent to the arrows, but no arrowhead will be plotted.\n\nhox[\"strand\"] = [\"+\", \"+\", \"+\", \"+\", \".\", \".\", \"-\", \"-\", \"+\"]\n\n\nplot_synteny_schematic(hox)\n\n\n\n\n\n\n\n\nSimilarly, we may want to highlight one or multiple of the genes, for instance because they were annotated via a different route. geneorder accepts an edge_color parameter in the input “GFF”, and will plot black edges if not otherwise instructed.\nLet’s say we want to highlight all genes that were based on PacBio transcripts:\n\nhox[\"edge_color\"] = hox[\"source\"].replace({\"PacBio\": \"cyan\", \"AUGUSTUS\": \"black\"})\n\n\nplot_synteny_schematic(hox)\n\n\n\n\n\n\n\n\nThe keen reader will have noticed that there is no gap between Hox8 and Hox10 - even though Hox9 is missing. We can edit the GFF dataframe to amend this:\n\nhox[\"strand\"] = \"+\"\nhox[\"edge_color\"] = \"black\"\n\n\nhox = util.insert_gap(\n    hox,\n    \"g9724\",\n    \"g9725\",\n    \"gene_id\",\n    no_gaps=1,\n    purge_columns=[\"gene_name\", \"color\", \"offset\", \"attributes\"],\n)\n\n\nhox\n\n\n\n\n\n\n\n\nseqid\nsource\ntype\nstart\nend\nscore\nstrand\nphase\nattributes\ngene_id\ngene_name\ncolor\noffset\nedge_color\n\n\n\n\n0\npseudochrom_56\nPacBio\ngene\n1927066\n1936157\n.\n+\n.\nID=PB.8615;function=Homeobox domain;gene=Hox1-...\nPB.8615\nHox1-A\nred\n0.02\nblack\n\n\n1\npseudochrom_56\nAUGUSTUS\ngene\n1998922\n2024148\n.\n+\n.\nID=g9718;function=sequence-specific DNA bindin...\ng9718\nHox2-A\norange\n0.02\nblack\n\n\n2\npseudochrom_56\nPacBio\ngene\n2058396\n2065953\n.\n+\n.\nID=PB.8616;function=homeobox protein;gene=Hox3...\nPB.8616\nHox3-A\ngold\n0.02\nblack\n\n\n3\npseudochrom_56\nAUGUSTUS\ngene\n2195412\n2206712\n.\n+\n.\nID=g9720;function=sequence-specific DNA bindin...\ng9720\nHox4-A\nlightgreen\n0.02\nblack\n\n\n4\npseudochrom_56\nAUGUSTUS\ngene\n2351936\n2354374\n.\n+\n.\nID=g9721;function=sequence-specific DNA bindin...\ng9721\nHox5-A\nforestgreen\n0.02\nblack\n\n\n5\npseudochrom_56\nPacBio\ngene\n2373415\n2375678\n.\n+\n.\nID=PB.8617;function=sequence-specific DNA bind...\nPB.8617\nHox6-A\nroyalblue\n0.02\nblack\n\n\n6\npseudochrom_56\nAUGUSTUS\ngene\n2565196\n2594468\n.\n+\n.\nID=g9723;function=sequence-specific DNA bindin...\ng9723\nHox7-A\ndarkblue\n0.02\nblack\n\n\n7\npseudochrom_56\nAUGUSTUS\ngene\n2916314\n2926445\n.\n+\n.\nID=g9724;function=sequence-specific DNA bindin...\ng9724\nHox8-A\ndarkmagenta\n0.02\nblack\n\n\n8\npseudochrom_56\nAUGUSTUS\ngene\n2926446\n2926447\n.\n+\n.\n\ngap_g9724-0\n\n\n\nblack\n\n\n9\npseudochrom_56\nAUGUSTUS\ngene\n2986021\n2996225\n.\n+\n.\nID=g9725;function=sequence-specific DNA bindin...\ng9725\nHox10-A\nmagenta\n0.02\nblack\n\n\n\n\n\n\n\n\nplot_synteny_schematic(hox)\n\n\n\n\n\n\n\n\nThis approach becomes even more powerful when we are plotting the same cluster in different instances, for example when there is a duplication of the cluster:\n\non_chrom12 = gff[\"seqid\"] == \"pseudochrom_12\"\nis_gene = gff[\"type\"] == \"gene\"\n\nhoxb = gff[on_chrom12 & is_gene].copy().reset_index(drop=True)\nhoxb[\"color\"] = [\"red\", \"orange\", \"darkblue\", \"magenta\"]\nhoxb\n\n\n\n\n\n\n\n\nseqid\nsource\ntype\nstart\nend\nscore\nstrand\nphase\nattributes\ngene_id\ngene_name\ncolor\n\n\n\n\n0\npseudochrom_12\nPacBio\ngene\n1927066\n1936157\n.\n-\n.\nID=PB.9615;function=Homeobox domain;gene=Hox1-...\nPB.9615\nHox1-B\nred\n\n\n1\npseudochrom_12\nAUGUSTUS\ngene\n1998922\n2024148\n.\n-\n.\nID=g7718;function=sequence-specific DNA bindin...\ng7718\nHox2-B\norange\n\n\n2\npseudochrom_12\nAUGUSTUS\ngene\n2565196\n2594468\n.\n-\n.\nID=g7723;function=sequence-specific DNA bindin...\ng7723\nHox7-B\ndarkblue\n\n\n3\npseudochrom_12\nAUGUSTUS\ngene\n2986021\n2996225\n.\n-\n.\nID=g7725;function=sequence-specific DNA bindin...\ng7725\nHox10-B\nmagenta\n\n\n\n\n\n\n\nThis cluster is missing Hox genes 3-6 and 8-9; we should add the corresponding number of gaps in order for the plots to line up accordingly:\n\nhoxb = util.insert_gap(\n    hoxb, \"g7718\", \"g7723\", \"gene_id\", no_gaps=4, purge_columns=[\"gene_name\", \"color\"]\n)\nhoxb = util.insert_gap(\n    hoxb, \"g7723\", \"g7725\", \"gene_id\", no_gaps=2, purge_columns=[\"gene_name\", \"color\"]\n)\nhoxb\n\n\n\n\n\n\n\n\nseqid\nsource\ntype\nstart\nend\nscore\nstrand\nphase\nattributes\ngene_id\ngene_name\ncolor\n\n\n\n\n0\npseudochrom_12\nPacBio\ngene\n1927066\n1936157\n.\n-\n.\nID=PB.9615;function=Homeobox domain;gene=Hox1-...\nPB.9615\nHox1-B\nred\n\n\n1\npseudochrom_12\nAUGUSTUS\ngene\n1998922\n2024148\n.\n-\n.\nID=g7718;function=sequence-specific DNA bindin...\ng7718\nHox2-B\norange\n\n\n2\npseudochrom_12\nAUGUSTUS\ngene\n2024149\n2024150\n.\n-\n.\nID=g7718;function=sequence-specific DNA bindin...\ngap_g7718-0\n\n\n\n\n3\npseudochrom_12\nAUGUSTUS\ngene\n2024151\n2024152\n.\n-\n.\nID=g7718;function=sequence-specific DNA bindin...\ngap_g7718-1\n\n\n\n\n4\npseudochrom_12\nAUGUSTUS\ngene\n2024153\n2024154\n.\n-\n.\nID=g7718;function=sequence-specific DNA bindin...\ngap_g7718-2\n\n\n\n\n5\npseudochrom_12\nAUGUSTUS\ngene\n2024155\n2024156\n.\n-\n.\nID=g7718;function=sequence-specific DNA bindin...\ngap_g7718-3\n\n\n\n\n6\npseudochrom_12\nAUGUSTUS\ngene\n2565196\n2594468\n.\n-\n.\nID=g7723;function=sequence-specific DNA bindin...\ng7723\nHox7-B\ndarkblue\n\n\n7\npseudochrom_12\nAUGUSTUS\ngene\n2594469\n2594470\n.\n-\n.\nID=g7723;function=sequence-specific DNA bindin...\ngap_g7723-0\n\n\n\n\n8\npseudochrom_12\nAUGUSTUS\ngene\n2594471\n2594472\n.\n-\n.\nID=g7723;function=sequence-specific DNA bindin...\ngap_g7723-1\n\n\n\n\n9\npseudochrom_12\nAUGUSTUS\ngene\n2986021\n2996225\n.\n-\n.\nID=g7725;function=sequence-specific DNA bindin...\ng7725\nHox10-B\nmagenta\n\n\n\n\n\n\n\n\nplot_synteny_schematic(hox)\nplot_synteny_schematic(hoxb)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSometimes we want to plot genes that belong to the same cluster but because of assembly fragmentation they are not on the same pseudomolecule.\n\non_scaff44 = gff[\"seqid\"] == \"scaffold_44\"\nis_gene = gff[\"type\"] == \"gene\"\n\nhoxc = gff[on_scaff44 & is_gene].copy().reset_index(drop=True)\nhoxc[\"color\"] = [\"dodgerblue\", \"hotpink\"]\nhoxc[\"edge_color\"] = \"black\"\n\ninterrupted = pd.concat((hox.loc[6:], hoxc)).reset_index(drop=True)\ninterrupted[\"offset\"] = 0.02\ninterrupted = util.insert_break(interrupted, locus1=\"g9725\", locus2=\"PB.1762\")\ninterrupted\n\n\n\n\n\n\n\n\nseqid\nsource\ntype\nstart\nend\nscore\nstrand\nphase\nattributes\ngene_id\ngene_name\ncolor\noffset\nedge_color\n\n\n\n\n0\npseudochrom_56\nAUGUSTUS\ngene\n2565196\n2594468\n.\n+\n.\nID=g9723;function=sequence-specific DNA bindin...\ng9723\nHox7-A\ndarkblue\n0.02\nblack\n\n\n1\npseudochrom_56\nAUGUSTUS\ngene\n2916314\n2926445\n.\n+\n.\nID=g9724;function=sequence-specific DNA bindin...\ng9724\nHox8-A\ndarkmagenta\n0.02\nblack\n\n\n2\npseudochrom_56\nAUGUSTUS\ngene\n2926446\n2926447\n.\n+\n.\n\ngap_g9724-0\n\n\n0.02\nblack\n\n\n3\npseudochrom_56\nAUGUSTUS\ngene\n2986021\n2996225\n.\n+\n.\nID=g9725;function=sequence-specific DNA bindin...\ng9725\nHox10-A\nmagenta\n0.02\nblack\n\n\n4\n\n\n\n\n\n\n\n\n\nbreak\n\n\n\n\n\n\n5\nscaffold_44\nPacBio\ngene\n1927066\n1936157\n.\n-\n.\nID=PB.1762;function=Homeobox domain;gene=Hox11...\nPB.1762\nHox11\ndodgerblue\n0.02\nblack\n\n\n6\nscaffold_44\nAUGUSTUS\ngene\n1998922\n2024148\n.\n-\n.\nID=g13061;function=sequence-specific DNA bindi...\ng13061\nHox12\nhotpink\n0.02\nblack\n\n\n\n\n\n\n\n\nplot_synteny_schematic(interrupted, interrupted=True)",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "util.html",
    "href": "util.html",
    "title": "util",
    "section": "",
    "text": "The information about the location of genes in a genome can come from anywhere, but it is typically stored in a GFF3 file. While this is far from a standardized format, there exist some guidelines about how a (syntactically) valid GFF3 file should look like; they can be found here. Such a typical, 9-column, tab-separated file is what I have mostly been working with. If your GFF3 looks different you will have to figure out how to read it in yourself - or open an issue and I can try to help you.\n\nsource\n\nread_gff\n\n read_gff (loc:str|pathlib.Path, gff_columns:list=['seqid', 'source',\n           'type', 'start', 'end', 'score', 'strand', 'phase',\n           'attributes'], skiprows:int=1, header:Union[int,collections.abc\n           .Sequence[int],NoneType,Literal['infer']]=None, sep:str='\\t',\n           **kwargs)\n\nA function to read a GFF3 file. Expects 9 tab-separated fields, and will try to name the columns according to https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nloc\nstr | pathlib.Path\n\ninput filepath\n\n\ngff_columns\nlist\n[‘seqid’, ‘source’, ‘type’, ‘start’, ‘end’, ‘score’, ‘strand’, ‘phase’, ‘attributes’]\n\n\n\nskiprows\nint\n1\nhow many rows to skip in the beginning\n\n\nheader\nUnion\nNone\n\n\n\nsep\nstr\n\nseparator for the table\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\nReturns\nDataFrame\n\nthe GFF3 file in DataFrame form\n\n\n\nFor instance, let’s try and read an example. This is a fake GFF3 file based on the Pycnogonum litorale Hox gene cluster; for the real one, please refer to our work on the sea spider.\n\ngff = read_gff(os.environ[\"EXAMPLE_DATA_PATH\"] + \"plit.gff3\")\ngff\n\n\n\n\n\n\n\n\nseqid\nsource\ntype\nstart\nend\nscore\nstrand\nphase\nattributes\n\n\n\n\n0\npseudochrom_56\nPacBio\ngene\n1927066\n1936157\n.\n-\n.\nID=PB.8615;function=Homeobox domain;gene=Hox1-...\n\n\n1\npseudochrom_56\nPacBio\nmRNA\n1927066\n1936157\n.\n-\n.\nID=PB.8615.1;Parent=PB.8615;function=Homeobox ...\n\n\n2\npseudochrom_56\nPacBio\nexon\n1927066\n1928028\n.\n-\n.\nID=PB.8615.1.exon1;Parent=PB.8615.1;function=H...\n\n\n3\npseudochrom_56\nPacBio\nexon\n1935229\n1936157\n.\n-\n.\nID=PB.8615.1.exon2;Parent=PB.8615.1;function=H...\n\n\n4\npseudochrom_56\nPacBio\nCDS\n1927066\n1928028\n.\n-\n1\nID=PB.8615.1.CDS1;Parent=PB.8615.1;function=Ho...\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n134\nscaffold_44\nAUGUSTUS\nCDS\n1998922\n2000654\n0.72\n-\n2\nID=g13061.t1.CDS1;Parent=g13061.t1;function=se...\n\n\n135\nscaffold_44\nAUGUSTUS\nCDS\n2023821\n2024148\n0.53\n-\n0\nID=g13061.t1.CDS2;Parent=g13061.t1;function=se...\n\n\n136\nscaffold_44\nGeneMark.hmm3\nmRNA\n2023807\n2024148\n.\n-\n.\nID=g13061.t2;Parent=g13061;function=sequence-s...\n\n\n137\nscaffold_44\nGeneMark.hmm3\nexon\n2023807\n2024148\n.\n-\n0\nID=g13061.t2.exon1;Parent=g13061.t2;function=s...\n\n\n138\nscaffold_44\nGeneMark.hmm3\nCDS\n2023807\n2024148\n.\n-\n0\nID=g13061.t2.CDS1;Parent=g13061.t2;function=se...\n\n\n\n\n139 rows × 9 columns\n\n\n\nTo begin with, we would like to visualize the ‘real’ Hox genes. We are also only interested in plotting entire genes (no exon structure), so we can filter the GFF rows based on that. We should also extract the gene IDs from the table to help us filter. Furthermore, we should be extracting gene names, in case we want to plot them too.\n\nsource\n\n\ngff_attribute_selector\n\n gff_attribute_selector (line, sep:str=';', select='ID')\n\nA function that extracts the value of a specified field from the attributes of a GFF3 line. Should be used on the attributes field of the corresponding pandas DataFrame.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nline\n\n\nthe attributes field of a GFF3 line\n\n\nsep\nstr\n;\nthe field separator. Should be a semicolon for a GFF3 file.\n\n\nselect\nstr\nID\nthe field ID. Should be one that is included in the GFF3 file. Refer to https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md for possibilities, or choose a manually defined tag that you know is present in the file.\n\n\nReturns\nstr\n\nthe value of field select\n\n\n\n\ngff[\"gene_id\"] = gff[\"attributes\"].apply(\n    lambda x: gff_attribute_selector(x, select=\"ID\")\n)\ngff[\"gene_name\"] = gff[\"attributes\"].apply(\n    lambda x: gff_attribute_selector(x, select=\"gene\")\n)\n\n\nhox_genes = [\n    \"PB.8615\",\n    \"g9718\",\n    \"PB.8616\",\n    \"g9720\",\n    \"g9721\",\n    \"PB.8617\",\n    \"g9723\",\n    \"g9724\",\n    \"g9725\",\n]\nis_hox = gff[\"gene_id\"].isin(hox_genes)\nis_gene = gff[\"type\"] == \"gene\"\n\nslim = gff[is_gene & is_hox]\nslim\n\n\n\n\n\n\n\n\nseqid\nsource\ntype\nstart\nend\nscore\nstrand\nphase\nattributes\ngene_id\ngene_name\n\n\n\n\n0\npseudochrom_56\nPacBio\ngene\n1927066\n1936157\n.\n-\n.\nID=PB.8615;function=Homeobox domain;gene=Hox1-...\nPB.8615\nHox1-A\n\n\n6\npseudochrom_56\nAUGUSTUS\ngene\n1998922\n2024148\n.\n-\n.\nID=g9718;function=sequence-specific DNA bindin...\ng9718\nHox2-A\n\n\n15\npseudochrom_56\nPacBio\ngene\n2058396\n2065953\n.\n-\n.\nID=PB.8616;function=homeobox protein;gene=Hox3...\nPB.8616\nHox3-A\n\n\n56\npseudochrom_56\nAUGUSTUS\ngene\n2195412\n2206712\n.\n-\n.\nID=g9720;function=sequence-specific DNA bindin...\ng9720\nHox4-A\n\n\n62\npseudochrom_56\nAUGUSTUS\ngene\n2351936\n2354374\n.\n-\n.\nID=g9721;function=sequence-specific DNA bindin...\ng9721\nHox5-A\n\n\n68\npseudochrom_56\nPacBio\ngene\n2373415\n2375678\n.\n-\n.\nID=PB.8617;function=sequence-specific DNA bind...\nPB.8617\nHox6-A\n\n\n79\npseudochrom_56\nAUGUSTUS\ngene\n2565196\n2594468\n.\n-\n.\nID=g9723;function=sequence-specific DNA bindin...\ng9723\nHox7-A\n\n\n85\npseudochrom_56\nAUGUSTUS\ngene\n2916314\n2926445\n.\n-\n.\nID=g9724;function=sequence-specific DNA bindin...\ng9724\nHox8-A\n\n\n91\npseudochrom_56\nAUGUSTUS\ngene\n2986021\n2996225\n.\n-\n.\nID=g9725;function=sequence-specific DNA bindin...\ng9725\nHox10-A\n\n\n\n\n\n\n\nThis table basically already contains all the information we need: * the name of the chromosome * the location of each gene * the strand of each gene * the directionality of each gene (given by relative start/end positions) * the name of each gene (hidden in the attributes)\nThe only thing that’s left is to extract this information in the way that is needed for the plotter:\n\nhox = slim[[\"seqid\", \"gene_name\", \"gene_id\", \"start\", \"end\"]].reset_index(drop=True)\nhox\n\n\n\n\n\n\n\n\nseqid\ngene_name\ngene_id\nstart\nend\n\n\n\n\n0\npseudochrom_56\nHox1-A\nPB.8615\n1927066\n1936157\n\n\n1\npseudochrom_56\nHox2-A\ng9718\n1998922\n2024148\n\n\n2\npseudochrom_56\nHox3-A\nPB.8616\n2058396\n2065953\n\n\n3\npseudochrom_56\nHox4-A\ng9720\n2195412\n2206712\n\n\n4\npseudochrom_56\nHox5-A\ng9721\n2351936\n2354374\n\n\n5\npseudochrom_56\nHox6-A\nPB.8617\n2373415\n2375678\n\n\n6\npseudochrom_56\nHox7-A\ng9723\n2565196\n2594468\n\n\n7\npseudochrom_56\nHox8-A\ng9724\n2916314\n2926445\n\n\n8\npseudochrom_56\nHox10-A\ng9725\n2986021\n2996225\n\n\n\n\n\n\n\n\nsource\n\n\nfilter\n\n filter (gff, filter_by_type=True, filter_type='gene',\n         filter_by_field=True, field='gene_id', field_values=None)\n\n\nsource\n\n\ndecorate\n\n decorate (gff:pandas.core.frame.DataFrame, attributes:dict={'gene_id':\n           'ID', 'gene_name': 'gene'})\n\nA function that\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngff\nDataFrame\n\na GFF file in Pandas dataframe form\n\n\nattributes\ndict\n{‘gene_id’: ‘ID’, ‘gene_name’: ‘gene’}\n\n\n\n\n\nsource\n\n\nsyntenic_block_borders\n\n syntenic_block_borders (gff:pandas.core.frame.DataFrame,\n                         flank_length:int=None, start:str='start',\n                         end:str='end')\n\nA function to calculate the boundaries of a syntenic block. It automatically pads the boundaries by an additional 5% of total length on both ends.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngff\nDataFrame\n\na GFF in Pandas dataframe form. Only includes the genes of the syntenic block in question.\n\n\nflank_length\nint\nNone\nthe amount of space to be granted on both sides of the syntenic region, in basepairs. If unspecified, it will be set to 5% of the syntenic block length.\n\n\nstart\nstr\nstart\nthe GFF column with the start position of the gene (“start”).\n\n\nend\nstr\nend\nthe GFF column with the end position of the gene (“end”).\n\n\nReturns\n(&lt;class ‘int’&gt;, &lt;class ‘int’&gt;)\n\n\n\n\n\n\ntest_fail(\n    syntenic_block_borders,\n    contains=\"The parameter `flank_length` has to be an integer\",\n    args=(gff,),\n    kwargs=dict(flank_length=5.2),\n)\n\nThe process of reading in a GFF3 file can be expedited with the\n\nsource\n\n\nread_aln\n\n read_aln (m8:str, id_sep:str|None=None, **kwargs)\n\nReads\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nm8\nstr\n\nthe path to the MMseqs2 alignment table file\n\n\nid_sep\nstr | None\nNone\n\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\nReturns\nDataFrame\n\nthe tabulated form of the alignment results.\n\n\n\n\nsource\n\n\nestimate_plot_size\n\n estimate_plot_size (gff, width_factor:int=3, height:int=2)\n\n\nassert estimate_plot_size(gff[gff[\"type\"] == \"gene\"]) == (45, 2)\n\n\nsource\n\n\ninsert_gap\n\n insert_gap (gff:pandas.core.frame.DataFrame, locus1=None, locus2=None,\n             identifier='gene_id', purge_columns=None, no_gaps=1)\n\nThis function inserts a number of dummy entries between two loci (lines) in the GFF DataFrame.\n\ntest_fail(\n    insert_gap,\n    contains=\"The two loci are not consecutive;\",\n    args=(hox,),\n    kwargs={\"locus1\": \"PB.8615\", \"locus2\": \"g9720\", \"identifier\": \"gene_id\"},\n)\n\n\nhox = insert_gap(\n    hox,\n    locus1=\"PB.8615\",\n    locus2=\"g9718\",\n    identifier=\"gene_id\",\n    no_gaps=4,\n    purge_columns=[\"gene_name\"],\n)\n\n\nhox[\"strand\"] = \"-\"\n\n\nhox\n\n\n\n\n\n\n\n\nseqid\ngene_name\ngene_id\nstart\nend\nstrand\n\n\n\n\n0\npseudochrom_56\nHox1-A\nPB.8615\n1927066\n1936157\n-\n\n\n1\npseudochrom_56\n\ngap_PB.8615-0\n1936158\n1936159\n-\n\n\n2\npseudochrom_56\n\ngap_PB.8615-1\n1936160\n1936161\n-\n\n\n3\npseudochrom_56\n\ngap_PB.8615-2\n1936162\n1936163\n-\n\n\n4\npseudochrom_56\n\ngap_PB.8615-3\n1936164\n1936165\n-\n\n\n5\npseudochrom_56\nHox2-A\ng9718\n1998922\n2024148\n-\n\n\n6\npseudochrom_56\nHox3-A\nPB.8616\n2058396\n2065953\n-\n\n\n7\npseudochrom_56\nHox4-A\ng9720\n2195412\n2206712\n-\n\n\n8\npseudochrom_56\nHox5-A\ng9721\n2351936\n2354374\n-\n\n\n9\npseudochrom_56\nHox6-A\nPB.8617\n2373415\n2375678\n-\n\n\n10\npseudochrom_56\nHox7-A\ng9723\n2565196\n2594468\n-\n\n\n11\npseudochrom_56\nHox8-A\ng9724\n2916314\n2926445\n-\n\n\n12\npseudochrom_56\nHox10-A\ng9725\n2986021\n2996225\n-\n\n\n\n\n\n\n\n\nhox = insert_gap(hox, locus2=\"PB.8615\", no_gaps=1, purge_columns=[\"gene_name\"])\nhox = insert_gap(hox, locus1=\"g9725\", no_gaps=1, purge_columns=[\"gene_name\"])\n\n\nsource\n\n\nflip\n\n flip (gff)\n\n\nflip(hox)\n\n\n\n\n\n\n\n\nseqid\nsource\ntype\nstart\nend\nscore\nstrand\nphase\nattributes\ngene_id\ngene_name\n\n\n\n\n0\npseudochrom_56\nPacBio\ngene\n-1927066\n-1936157\n.\n+\n.\nID=PB.8615;function=Homeobox domain;gene=Hox1-...\nPB.8615\nHox1-A\n\n\n1\npseudochrom_56\nAUGUSTUS\ngene\n-1998922\n-2024148\n.\n+\n.\nID=g9718;function=sequence-specific DNA bindin...\ng9718\nHox2-A\n\n\n2\npseudochrom_56\nPacBio\ngene\n-2058396\n-2065953\n.\n+\n.\nID=PB.8616;function=homeobox protein;gene=Hox3...\nPB.8616\nHox3-A\n\n\n3\npseudochrom_56\nAUGUSTUS\ngene\n-2195412\n-2206712\n.\n+\n.\nID=g9720;function=sequence-specific DNA bindin...\ng9720\nHox4-A\n\n\n4\npseudochrom_56\nAUGUSTUS\ngene\n-2351936\n-2354374\n.\n+\n.\nID=g9721;function=sequence-specific DNA bindin...\ng9721\nHox5-A\n\n\n5\npseudochrom_56\nPacBio\ngene\n-2373415\n-2375678\n.\n+\n.\nID=PB.8617;function=sequence-specific DNA bind...\nPB.8617\nHox6-A\n\n\n6\npseudochrom_56\nAUGUSTUS\ngene\n-2565196\n-2594468\n.\n+\n.\nID=g9723;function=sequence-specific DNA bindin...\ng9723\nHox7-A\n\n\n7\npseudochrom_56\nAUGUSTUS\ngene\n-2916314\n-2926445\n.\n+\n.\nID=g9724;function=sequence-specific DNA bindin...\ng9724\nHox8-A\n\n\n8\npseudochrom_56\nAUGUSTUS\ngene\n-2986021\n-2996225\n.\n+\n.\nID=g9725;function=sequence-specific DNA bindin...\ng9725\nHox10-A\n\n\n\n\n\n\n\n\nsource\n\n\ninsert_break\n\n insert_break (gff:pandas.core.frame.DataFrame, locus1=None, locus2=None,\n               identifier='gene_id')\n\nThis function inserts a molecule break between two loci (lines) in the GFF DataFrame.\n\nkeep = gff[\"gene_id\"].isin(hox_genes)\nhox = gff[keep].reset_index(drop=True)\ndecorate(hox)\n\non_scaff44 = gff[\"seqid\"] == \"scaffold_44\"\nis_gene = gff[\"type\"] == \"gene\"\nhoxc = gff[is_gene & on_scaff44].reset_index(drop=True)\ndecorate(hoxc)\n\n\ninterrupted = pd.concat((hox.loc[6:], hoxc)).reset_index(drop=True)\n\n\ninterrupted\n\n\n\n\n\n\n\n\nseqid\nsource\ntype\nstart\nend\nscore\nstrand\nphase\nattributes\ngene_id\ngene_name\n\n\n\n\n0\npseudochrom_56\nAUGUSTUS\ngene\n2565196\n2594468\n.\n-\n.\nID=g9723;function=sequence-specific DNA bindin...\ng9723\nHox7-A\n\n\n1\npseudochrom_56\nAUGUSTUS\ngene\n2916314\n2926445\n.\n-\n.\nID=g9724;function=sequence-specific DNA bindin...\ng9724\nHox8-A\n\n\n2\npseudochrom_56\nAUGUSTUS\ngene\n2986021\n2996225\n.\n-\n.\nID=g9725;function=sequence-specific DNA bindin...\ng9725\nHox10-A\n\n\n3\nscaffold_44\nPacBio\ngene\n1927066\n1936157\n.\n-\n.\nID=PB.1762;function=Homeobox domain;gene=Hox11...\nPB.1762\nHox11\n\n\n4\nscaffold_44\nAUGUSTUS\ngene\n1998922\n2024148\n.\n-\n.\nID=g13061;function=sequence-specific DNA bindi...\ng13061\nHox12\n\n\n\n\n\n\n\n\ninterrupted = insert_break(interrupted, locus1=\"g9725\", locus2=\"PB.1762\")\n\n\ninterrupted\n\n\n\n\n\n\n\n\nseqid\nsource\ntype\nstart\nend\nscore\nstrand\nphase\nattributes\ngene_id\ngene_name\n\n\n\n\n0\npseudochrom_56\nAUGUSTUS\ngene\n2565196\n2594468\n.\n-\n.\nID=g9723;function=sequence-specific DNA bindin...\ng9723\nHox7-A\n\n\n1\npseudochrom_56\nAUGUSTUS\ngene\n2916314\n2926445\n.\n-\n.\nID=g9724;function=sequence-specific DNA bindin...\ng9724\nHox8-A\n\n\n2\npseudochrom_56\nAUGUSTUS\ngene\n2986021\n2996225\n.\n-\n.\nID=g9725;function=sequence-specific DNA bindin...\ng9725\nHox10-A\n\n\n3\n\n\n\n\n\n\n\n\n\nbreak\n\n\n\n4\nscaffold_44\nPacBio\ngene\n1927066\n1936157\n.\n-\n.\nID=PB.1762;function=Homeobox domain;gene=Hox11...\nPB.1762\nHox11\n\n\n5\nscaffold_44\nAUGUSTUS\ngene\n1998922\n2024148\n.\n-\n.\nID=g13061;function=sequence-specific DNA bindi...\ng13061\nHox12",
    "crumbs": [
      "util"
    ]
  }
]